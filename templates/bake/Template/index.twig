{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
<?php
/**
 * @var \{{ namespace }}\View\AppView $this
 * @var \{{ entityClass }}[]|\Cake\Collection\CollectionInterface ${{ pluralVar }}
 * @var \CakeDC\Datatables\View\Helper\DatatableHelper $this->Datatable
 */

{% set fields = Bake.filterFields(fields, schema, modelObject, indexColumns, ['binary', 'text']) %}
$headers = [
{% for field in fields %}
    __('{{ field }}'),
{% endfor %}
];

$columns = [
{% for field in fields %}
{% set isKey = false %}
{% if associations.BelongsTo is defined %}
{% for alias, details in associations.BelongsTo %}
{% if field == details.foreignKey %}
{% set isKey = true %}
    [
        'name' => '{{ field }}',
        'orderable' => 'false',
        'links' => [
            [
                'url' => [
                    'controller' => '{{ details.controller }}',
                    'action' => 'view',
                    'extra' => "/' + obj.{{ field }} + '",
                ],
                'value' => 'obj.{{ details.property }}.{{details.displayField}}',
                'label' => '',
            ],
        ],
    ],
{% endif %}
{% endfor %}
{% endif %}
{% if isKey is not same as(true) %}
{% set columnData = Bake.columnData(field, schema) %}
{% if columnData.type not in ['integer', 'float', 'decimal', 'biginteger', 'smallinteger', 'tinyinteger'] %}
    __('{{ field }}'),
{% elseif columnData.null %}
{#<td><?= ${{ singularVar }}->{{ field }} === null ? '' : $this->Number->format(${{ singularVar }}->{{ field }}) ?></td>#}
    __('{{ field }}'),
{% else %}
{#<td><?= $this->Number->format(${{ singularVar }}->{{ field }}) ?></td>#}
    __('{{ field }}'),
{% endif %}
{% endif %}
{% endfor %}
];

$this->Datatable->setFields($columns);
$this->Datatable->setRowActions();
?>

<script type="text/javascript">
<?= $this->Datatable->getDatatableScript('table-{{ pluralVar }}') ?>
</script>

<div class="{{ pluralVar }} index content">
    <?= $this->Html->link(__('New {{ singularHumanName }}'), ['action' => 'add'], ['class' => 'button float-right']) ?>
    <h3><?= __('{{ pluralHumanName }}') ?></h3>
    <div class="table-responsive">
        <table id ="table-{{ pluralVar }}">
            <thead>
                <?= $this->Datatable->getTableHeaders($headers) ?>
            </thead>
        </table>
    </div>
</div>
